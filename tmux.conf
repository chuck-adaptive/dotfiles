#   ########
#
#   Keybindins
#
#   ########

# reset prefix from C-b -> C-s
unbind C-b
set -g prefix C-s
bind-key -r C-s send-prefix

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind-key -n M-h if-shell "$is_vim" "send-keys M-h" "select-pane -L"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j" "select-pane -D"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k" "select-pane -U"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l" "select-pane -R"

bind-key -n M-h select-pane -L
bind-key -n M-j select-pane -D
bind-key -n M-k select-pane -U
bind-key -n M-l select-pane -R

# resize commands
bind-key -n S-Left resize-pane -L 2
bind-key -n S-Right resize-pane -R 2
bind-key -n S-Down resize-pane -D 1
bind-key -n S-Up resize-pane -U 1

bind-key -n C-Left resize-pane -L 10
bind-key -n C-Right resize-pane -R 10
bind-key -n C-Down resize-pane -D 5
bind-key -n C-Up resize-pane -U 5

# prefix capital K will kill the current session and join the next open onk
bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-\
  message -p "#S")" || tmux kill-session'

# prefix control b breaks current to new tmux session with tat
bind-key C-b send-keys 'tat && exit' 'C-m'

# opens a new slit with a dropdown of all sessions, select one to switch
bind-key C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | \
  grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | \
  xargs tmux switch-client -t"

# turn the current pane into a new window, with content or without
bind-key b break-pane -d
bind-key c new-window -c '#{pane_current_path}'

# Copy options -
# Meta-C or use the mouse to create a selection
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "pbcopy"
bind-key -T copy-mode-vi M-c send-keys -X copy-pipe "pbcopy"

# obvious grievance with this command but nothing good to replace it with
bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Split keyboard shortcuts
bind-key - split-window -v -c '#{pane_current_path}'
bind-key \\ split-window -h -c '#{pane_current_path}'

#   ########
#
#   Options
#
#   ########

# on macos this resolves to xterm-256color. Despite the tmux docs suggesting I
# must use screen/tmux - this resolves all 256 colors as per the color script
# in bin/user
set-option -g default-terminal $TERM

# If $EDITOR or $VISUAL are set, the terminal will use vim keybindings. This
# restores terminal bindings to emacs. On MacOS, this seems to do nothing by
# default but it's something that may be set
set-option -g status-keys "emacs"

# "Color Scheme"
set-option -g status-bg 'white'
set-option -g status-fg 'black'
set-option -g window-status-current-style 'fg=white,bg=black'

# define status syntax
set-option -g status-left-length 100
set-option -g status-right-length 100
set-option -g status-left " [#S] "
set-option -g status-right "|#(tmux list-sessions | sed -E 's/:.*$//' | \
  grep -v \"^$(tmux display-message -p '#S')\$\" | cut -c 1-4 | tr '\\n' '|') \
  #(date '+%m/%d/%y %H:%M') "

set-option -g base-index 1
set-option -g renumber-windows on

set-option -g window-status-format '#I #{b:pane_current_path}#F'
set-option -g window-status-current-format ' #I #{b:pane_current_path}#F  '

set-option -g history-limit 30000

# enable mouse scrolling
set-option -g mouse on

# Use vim keybindings in copy mode
set-option -g mode-keys vi
# set-window-option -g mode-keys vi

